/* Modernizr 2.8.3 (Custom Build) | MIT & BSD
 * Build: http://modernizr.com/download/#-inlinesvg-svg-svgclippaths-printshiv-mq-cssclasses-teststyles-load
 */
window.Modernizr = function(window, document, undefined) {
    function setCss(str) {
        mStyle.cssText = str;
    }
    function is(obj, type) {
        return typeof obj === type;
    }
    var inputElem, featureName, hasOwnProp, version = "2.8.3", Modernizr = {}, enableClasses = !0, docElement = document.documentElement, mod = "modernizr", modElem = document.createElement(mod), mStyle = modElem.style, toString = {}.toString, ns = {
        svg: "http://www.w3.org/2000/svg"
    }, tests = {}, classes = [], slice = classes.slice, injectElementWithStyles = function(rule, callback, nodes, testnames) {
        var style, ret, node, docOverflow, div = document.createElement("div"), body = document.body, fakeBody = body || document.createElement("body");
        if (parseInt(nodes, 10)) for (;nodes--; ) node = document.createElement("div"), 
        node.id = testnames ? testnames[nodes] : mod + (nodes + 1), 
        div.appendChild(node);
        return style = [ "&#173;", '<style id="s', mod, '">', rule, "</style>" ].join(""), 
        div.id = mod, (body ? div : fakeBody).innerHTML += style, 
        fakeBody.appendChild(div), body || (fakeBody.style.background = "", 
        fakeBody.style.overflow = "hidden", docOverflow = docElement.style.overflow, 
        docElement.style.overflow = "hidden", docElement.appendChild(fakeBody)), 
        ret = callback(div, rule), body ? div.parentNode.removeChild(div) : (fakeBody.parentNode.removeChild(fakeBody), 
        docElement.style.overflow = docOverflow), !!ret;
    }, testMediaQuery = function(mq) {
        var matchMedia = window.matchMedia || window.msMatchMedia;
        if (matchMedia) return matchMedia(mq) && matchMedia(mq).matches || !1;
        var bool;
        return injectElementWithStyles("@media " + mq + " { #" + mod + " { position: absolute; } }", function(node) {
            bool = "absolute" == (window.getComputedStyle ? getComputedStyle(node, null) : node.currentStyle).position;
        }), bool;
    }, _hasOwnProperty = {}.hasOwnProperty;
    hasOwnProp = is(_hasOwnProperty, "undefined") || is(_hasOwnProperty.call, "undefined") ? function(object, property) {
        return property in object && is(object.constructor.prototype[property], "undefined");
    } : function(object, property) {
        return _hasOwnProperty.call(object, property);
    }, Function.prototype.bind || (Function.prototype.bind = function(that) {
        var target = this;
        if ("function" != typeof target) throw new TypeError();
        var args = slice.call(arguments, 1), bound = function() {
            if (this instanceof bound) {
                var F = function() {};
                F.prototype = target.prototype;
                var self = new F(), result = target.apply(self, args.concat(slice.call(arguments)));
                return Object(result) === result ? result : self;
            }
            return target.apply(that, args.concat(slice.call(arguments)));
        };
        return bound;
    }), tests.svg = function() {
        return !!document.createElementNS && !!document.createElementNS(ns.svg, "svg").createSVGRect;
    }, tests.inlinesvg = function() {
        var div = document.createElement("div");
        return div.innerHTML = "<svg/>", (div.firstChild && div.firstChild.namespaceURI) == ns.svg;
    }, tests.svgclippaths = function() {
        return !!document.createElementNS && /SVGClipPath/.test(toString.call(document.createElementNS(ns.svg, "clipPath")));
    };
    for (var feature in tests) hasOwnProp(tests, feature) && (featureName = feature.toLowerCase(), 
    Modernizr[featureName] = tests[feature](), classes.push((Modernizr[featureName] ? "" : "no-") + featureName));
    return Modernizr.addTest = function(feature, test) {
        if ("object" == typeof feature) for (var key in feature) hasOwnProp(feature, key) && Modernizr.addTest(key, feature[key]); else {
            if (feature = feature.toLowerCase(), Modernizr[feature] !== undefined) return Modernizr;
            test = "function" == typeof test ? test() : test, 
            "undefined" != typeof enableClasses && enableClasses && (docElement.className += " " + (test ? "" : "no-") + feature), 
            Modernizr[feature] = test;
        }
        return Modernizr;
    }, setCss(""), modElem = inputElem = null, Modernizr._version = version, 
    Modernizr.mq = testMediaQuery, Modernizr.testStyles = injectElementWithStyles, 
    docElement.className = docElement.className.replace(/(^|\s)no-js(\s|$)/, "$1$2") + (enableClasses ? " js " + classes.join(" ") : ""), 
    Modernizr;
}(this, this.document), function(window, document) {
    /*--------------------------------------------------------------------------*/
    /**
   * Creates a style sheet with the given CSS text and adds it to the document.
   * @private
   * @param {Document} ownerDocument The document.
   * @param {String} cssText The CSS text.
   * @returns {StyleSheet} The style element.
   */
    function addStyleSheet(ownerDocument, cssText) {
        var p = ownerDocument.createElement("p"), parent = ownerDocument.getElementsByTagName("head")[0] || ownerDocument.documentElement;
        return p.innerHTML = "x<style>" + cssText + "</style>", 
        parent.insertBefore(p.lastChild, parent.firstChild);
    }
    /**
   * Returns the value of `html5.elements` as an array.
   * @private
   * @returns {Array} An array of shived element node names.
   */
    function getElements() {
        var elements = html5.elements;
        return "string" == typeof elements ? elements.split(" ") : elements;
    }
    /**
   * Returns the data associated to the given document
   * @private
   * @param {Document} ownerDocument The document.
   * @returns {Object} An object of data.
   */
    function getExpandoData(ownerDocument) {
        var data = expandoData[ownerDocument[expando]];
        return data || (data = {}, expanID++, ownerDocument[expando] = expanID, 
        expandoData[expanID] = data), data;
    }
    /**
   * returns a shived element for the given nodeName and document
   * @memberOf html5
   * @param {String} nodeName name of the element
   * @param {Document} ownerDocument The context document.
   * @returns {Object} The shived element.
   */
    function createElement(nodeName, ownerDocument, data) {
        if (ownerDocument || (ownerDocument = document), supportsUnknownElements) return ownerDocument.createElement(nodeName);
        data || (data = getExpandoData(ownerDocument));
        var node;
        // Avoid adding some elements to fragments in IE < 9 because
        // * Attributes like `name` or `type` cannot be set/changed once an element
        //   is inserted into a document/fragment
        // * Link elements with `src` attributes that are inaccessible, as with
        //   a 403 response, will cause the tab/window to crash
        // * Script elements appended to fragments will execute when their `src`
        //   or `text` property is set
        return node = data.cache[nodeName] ? data.cache[nodeName].cloneNode() : saveClones.test(nodeName) ? (data.cache[nodeName] = data.createElem(nodeName)).cloneNode() : data.createElem(nodeName), 
        !node.canHaveChildren || reSkip.test(nodeName) || node.tagUrn ? node : data.frag.appendChild(node);
    }
    /**
   * returns a shived DocumentFragment for the given document
   * @memberOf html5
   * @param {Document} ownerDocument The context document.
   * @returns {Object} The shived DocumentFragment.
   */
    function createDocumentFragment(ownerDocument, data) {
        if (ownerDocument || (ownerDocument = document), supportsUnknownElements) return ownerDocument.createDocumentFragment();
        data = data || getExpandoData(ownerDocument);
        for (var clone = data.frag.cloneNode(), i = 0, elems = getElements(), l = elems.length; l > i; i++) clone.createElement(elems[i]);
        return clone;
    }
    /**
   * Shivs the `createElement` and `createDocumentFragment` methods of the document.
   * @private
   * @param {Document|DocumentFragment} ownerDocument The document.
   * @param {Object} data of the document.
   */
    function shivMethods(ownerDocument, data) {
        data.cache || (data.cache = {}, data.createElem = ownerDocument.createElement, 
        data.createFrag = ownerDocument.createDocumentFragment, 
        data.frag = data.createFrag()), ownerDocument.createElement = function(nodeName) {
            //abort shiv
            //abort shiv
            return html5.shivMethods ? createElement(nodeName, ownerDocument, data) : data.createElem(nodeName);
        }, ownerDocument.createDocumentFragment = Function("h,f", "return function(){var n=f.cloneNode(),c=n.createElement;h.shivMethods&&(" + // unroll the `createElement` calls
        getElements().join().replace(/\w+/g, function(nodeName) {
            return data.createElem(nodeName), data.frag.createElement(nodeName), 
            'c("' + nodeName + '")';
        }) + ");return n}")(html5, data.frag);
    }
    /*--------------------------------------------------------------------------*/
    /**
   * Shivs the given document.
   * @memberOf html5
   * @param {Document} ownerDocument The document to shiv.
   * @returns {Document} The shived document.
   */
    function shivDocument(ownerDocument) {
        ownerDocument || (ownerDocument = document);
        var data = getExpandoData(ownerDocument);
        // corrects block display not defined in IE6/7/8/9
        return !html5.shivCSS || supportsHtml5Styles || data.hasCSS || (data.hasCSS = !!addStyleSheet(ownerDocument, "article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}mark{background:#FF0;color:#000}template{display:none}")), 
        supportsUnknownElements || shivMethods(ownerDocument, data), 
        ownerDocument;
    }
    /*--------------------------------------------------------------------------*/
    /**
   * Wraps all HTML5 elements in the given document with printable elements.
   * (eg. the "header" element is wrapped with the "html5shiv:header" element)
   * @private
   * @param {Document} ownerDocument The document.
   * @returns {Array} An array wrappers added.
   */
    function addWrappers(ownerDocument) {
        for (var node, nodes = ownerDocument.getElementsByTagName("*"), index = nodes.length, reElements = RegExp("^(?:" + getElements().join("|") + ")$", "i"), result = []; index--; ) node = nodes[index], 
        reElements.test(node.nodeName) && result.push(node.applyElement(createWrapper(node)));
        return result;
    }
    /**
   * Creates a printable wrapper for the given element.
   * @private
   * @param {Element} element The element.
   * @returns {Element} The wrapper.
   */
    function createWrapper(element) {
        // copy element attributes to the wrapper
        for (var node, nodes = element.attributes, index = nodes.length, wrapper = element.ownerDocument.createElement(shivNamespace + ":" + element.nodeName); index--; ) node = nodes[index], 
        node.specified && wrapper.setAttribute(node.nodeName, node.nodeValue);
        // copy element styles to the wrapper
        return wrapper.style.cssText = element.style.cssText, 
        wrapper;
    }
    /**
   * Shivs the given CSS text.
   * (eg. header{} becomes html5shiv\:header{})
   * @private
   * @param {String} cssText The CSS text to shiv.
   * @returns {String} The shived CSS text.
   */
    function shivCssText(cssText) {
        for (var pair, parts = cssText.split("{"), index = parts.length, reElements = RegExp("(^|[\\s,>+~])(" + getElements().join("|") + ")(?=[[\\s,>+~#.:]|$)", "gi"), replacement = "$1" + shivNamespace + "\\:$2"; index--; ) pair = parts[index] = parts[index].split("}"), 
        pair[pair.length - 1] = pair[pair.length - 1].replace(reElements, replacement), 
        parts[index] = pair.join("}");
        return parts.join("{");
    }
    /**
   * Removes the given wrappers, leaving the original elements.
   * @private
   * @params {Array} wrappers An array of printable wrappers.
   */
    function removeWrappers(wrappers) {
        for (var index = wrappers.length; index--; ) wrappers[index].removeNode();
    }
    /*--------------------------------------------------------------------------*/
    /**
   * Shivs the given document for print.
   * @memberOf html5
   * @param {Document} ownerDocument The document to shiv.
   * @returns {Document} The shived document.
   */
    function shivPrint(ownerDocument) {
        function removeSheet() {
            clearTimeout(data._removeSheetTimer), shivedSheet && shivedSheet.removeNode(!0), 
            shivedSheet = null;
        }
        var shivedSheet, wrappers, data = getExpandoData(ownerDocument), namespaces = ownerDocument.namespaces, ownerWindow = ownerDocument.parentWindow;
        return !supportsShivableSheets || ownerDocument.printShived ? ownerDocument : ("undefined" == typeof namespaces[shivNamespace] && namespaces.add(shivNamespace), 
        ownerWindow.attachEvent("onbeforeprint", function() {
            removeSheet();
            // convert styleSheets collection to an array
            for (var imports, length, sheet, collection = ownerDocument.styleSheets, cssText = [], index = collection.length, sheets = Array(index); index--; ) sheets[index] = collection[index];
            // concat all style sheet CSS text
            for (;sheet = sheets.pop(); ) // IE does not enforce a same origin policy for external style sheets...
            // but has trouble with some dynamically created stylesheets
            if (!sheet.disabled && reMedia.test(sheet.media)) {
                try {
                    imports = sheet.imports, length = imports.length;
                } catch (er) {
                    length = 0;
                }
                for (index = 0; length > index; index++) sheets.push(imports[index]);
                try {
                    cssText.push(sheet.cssText);
                } catch (er) {}
            }
            // wrap all HTML5 elements with printable elements and add the shived style sheet
            cssText = shivCssText(cssText.reverse().join("")), 
            wrappers = addWrappers(ownerDocument), shivedSheet = addStyleSheet(ownerDocument, cssText);
        }), ownerWindow.attachEvent("onafterprint", function() {
            // remove wrappers, leaving the original elements, and remove the shived style sheet
            removeWrappers(wrappers), clearTimeout(data._removeSheetTimer), 
            data._removeSheetTimer = setTimeout(removeSheet, 500);
        }), ownerDocument.printShived = !0, ownerDocument);
    }
    /*jshint evil:true */
    /** version */
    var supportsHtml5Styles, supportsUnknownElements, version = "3.7.0", options = window.html5 || {}, reSkip = /^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i, saveClones = /^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i, expando = "_html5shiv", expanID = 0, expandoData = {};
    !function() {
        try {
            var a = document.createElement("a");
            a.innerHTML = "<xyz></xyz>", //if the hidden property is implemented we can assume, that the browser supports basic HTML5 Styles
            supportsHtml5Styles = "hidden" in a, supportsUnknownElements = 1 == a.childNodes.length || function() {
                // assign a false positive if unable to shiv
                document.createElement("a");
                var frag = document.createDocumentFragment();
                return "undefined" == typeof frag.cloneNode || "undefined" == typeof frag.createDocumentFragment || "undefined" == typeof frag.createElement;
            }();
        } catch (e) {
            // assign a false positive if detection fails => unable to shiv
            supportsHtml5Styles = !0, supportsUnknownElements = !0;
        }
    }();
    /*--------------------------------------------------------------------------*/
    /**
   * The `html5` object is exposed so that more elements can be shived and
   * existing shiving can be detected on iframes.
   * @type Object
   * @example
   *
   * // options can be changed before the script is included
   * html5 = { 'elements': 'mark section', 'shivCSS': false, 'shivMethods': false };
   */
    var html5 = {
        /**
     * An array or space separated string of node names of the elements to shiv.
     * @memberOf html5
     * @type Array|String
     */
        elements: options.elements || "abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output progress section summary template time video",
        /**
     * current version of html5shiv
     */
        version: version,
        /**
     * A flag to indicate that the HTML5 style sheet should be inserted.
     * @memberOf html5
     * @type Boolean
     */
        shivCSS: options.shivCSS !== !1,
        /**
     * Is equal to true if a browser supports creating unknown/HTML5 elements
     * @memberOf html5
     * @type boolean
     */
        supportsUnknownElements: supportsUnknownElements,
        /**
     * A flag to indicate that the document's `createElement` and `createDocumentFragment`
     * methods should be overwritten.
     * @memberOf html5
     * @type Boolean
     */
        shivMethods: options.shivMethods !== !1,
        /**
     * A string to describe the type of `html5` object ("default" or "default print").
     * @memberOf html5
     * @type String
     */
        type: "default",
        // shivs the document according to the specified `html5` object options
        shivDocument: shivDocument,
        //creates a shived element
        createElement: createElement,
        //creates a shived documentFragment
        createDocumentFragment: createDocumentFragment
    };
    /*--------------------------------------------------------------------------*/
    // expose html5
    window.html5 = html5, // shiv the document
    shivDocument(document);
    /*------------------------------- Print Shiv -------------------------------*/
    /** Used to filter media types */
    var reMedia = /^$|\b(?:all|print)\b/, shivNamespace = "html5shiv", supportsShivableSheets = !supportsUnknownElements && function() {
        // assign a false negative if unable to shiv
        var docEl = document.documentElement;
        return !("undefined" == typeof document.namespaces || "undefined" == typeof document.parentWindow || "undefined" == typeof docEl.applyElement || "undefined" == typeof docEl.removeNode || "undefined" == typeof window.attachEvent);
    }();
    /*--------------------------------------------------------------------------*/
    // expose API
    html5.type += " print", html5.shivPrint = shivPrint, 
    // shiv for print
    shivPrint(document);
}(this, document), /*yepnope1.5.4|WTFPL*/
function(a, b, c) {
    function d(a) {
        return "[object Function]" == o.call(a);
    }
    function e(a) {
        return "string" == typeof a;
    }
    function f() {}
    function g(a) {
        return !a || "loaded" == a || "complete" == a || "uninitialized" == a;
    }
    function h() {
        var a = p.shift();
        q = 1, a ? a.t ? m(function() {
            ("c" == a.t ? B.injectCss : B.injectJs)(a.s, 0, a.a, a.x, a.e, 1);
        }, 0) : (a(), h()) : q = 0;
    }
    function i(a, c, d, e, f, i, j) {
        function k(b) {
            if (!o && g(l.readyState) && (u.r = o = 1, !q && h(), 
            l.onload = l.onreadystatechange = null, b)) {
                "img" != a && m(function() {
                    t.removeChild(l);
                }, 50);
                for (var d in y[c]) y[c].hasOwnProperty(d) && y[c][d].onload();
            }
        }
        var j = j || B.errorTimeout, l = b.createElement(a), o = 0, r = 0, u = {
            t: d,
            s: c,
            e: f,
            a: i,
            x: j
        };
        1 === y[c] && (r = 1, y[c] = []), "object" == a ? l.data = c : (l.src = c, 
        l.type = a), l.width = l.height = "0", l.onerror = l.onload = l.onreadystatechange = function() {
            k.call(this, r);
        }, p.splice(e, 0, u), "img" != a && (r || 2 === y[c] ? (t.insertBefore(l, s ? null : n), 
        m(k, j)) : y[c].push(l));
    }
    function j(a, b, c, d, f) {
        return q = 0, b = b || "j", e(a) ? i("c" == b ? v : u, a, b, this.i++, c, d, f) : (p.splice(this.i++, 0, a), 
        1 == p.length && h()), this;
    }
    function k() {
        var a = B;
        return a.loader = {
            load: j,
            i: 0
        }, a;
    }
    var A, B, l = b.documentElement, m = a.setTimeout, n = b.getElementsByTagName("script")[0], o = {}.toString, p = [], q = 0, r = "MozAppearance" in l.style, s = r && !!b.createRange().compareNode, t = s ? l : n.parentNode, l = a.opera && "[object Opera]" == o.call(a.opera), l = !!b.attachEvent && !l, u = r ? "object" : l ? "script" : "img", v = l ? "script" : u, w = Array.isArray || function(a) {
        return "[object Array]" == o.call(a);
    }, x = [], y = {}, z = {
        timeout: function(a, b) {
            return b.length && (a.timeout = b[0]), a;
        }
    };
    B = function(a) {
        function b(a) {
            var e, f, g, a = a.split("!"), b = x.length, c = a.pop(), d = a.length, c = {
                url: c,
                origUrl: c,
                prefixes: a
            };
            for (f = 0; d > f; f++) g = a[f].split("="), (e = z[g.shift()]) && (c = e(c, g));
            for (f = 0; b > f; f++) c = x[f](c);
            return c;
        }
        function g(a, e, f, g, h) {
            var i = b(a), j = i.autoCallback;
            i.url.split(".").pop().split("?").shift(), i.bypass || (e && (e = d(e) ? e : e[a] || e[g] || e[a.split("/").pop().split("?")[0]]), 
            i.instead ? i.instead(a, e, f, g, h) : (y[i.url] ? i.noexec = !0 : y[i.url] = 1, 
            f.load(i.url, i.forceCSS || !i.forceJS && "css" == i.url.split(".").pop().split("?").shift() ? "c" : c, i.noexec, i.attrs, i.timeout), 
            (d(e) || d(j)) && f.load(function() {
                k(), e && e(i.origUrl, h, g), j && j(i.origUrl, h, g), 
                y[i.url] = 2;
            })));
        }
        function h(a, b) {
            function c(a, c) {
                if (a) {
                    if (e(a)) c || (j = function() {
                        var a = [].slice.call(arguments);
                        k.apply(this, a), l();
                    }), g(a, j, b, 0, h); else if (Object(a) === a) for (n in m = function() {
                        var c, b = 0;
                        for (c in a) a.hasOwnProperty(c) && b++;
                        return b;
                    }(), a) a.hasOwnProperty(n) && (!c && !--m && (d(j) ? j = function() {
                        var a = [].slice.call(arguments);
                        k.apply(this, a), l();
                    } : j[n] = function(a) {
                        return function() {
                            var b = [].slice.call(arguments);
                            a && a.apply(this, b), l();
                        };
                    }(k[n])), g(a[n], j, b, n, h));
                } else !c && l();
            }
            var m, n, h = !!a.test, i = a.load || a.both, j = a.callback || f, k = j, l = a.complete || f;
            c(h ? a.yep : a.nope, !!i), i && c(i);
        }
        var i, j, l = this.yepnope.loader;
        if (e(a)) g(a, 0, l, 0); else if (w(a)) for (i = 0; i < a.length; i++) j = a[i], 
        e(j) ? g(j, 0, l, 0) : w(j) ? B(j) : Object(j) === j && h(j, l); else Object(a) === a && h(a, l);
    }, B.addPrefix = function(a, b) {
        z[a] = b;
    }, B.addFilter = function(a) {
        x.push(a);
    }, B.errorTimeout = 1e4, null == b.readyState && b.addEventListener && (b.readyState = "loading", 
    b.addEventListener("DOMContentLoaded", A = function() {
        b.removeEventListener("DOMContentLoaded", A, 0), b.readyState = "complete";
    }, 0)), a.yepnope = k(), a.yepnope.executeStack = h, 
    a.yepnope.injectJs = function(a, c, d, e, i, j) {
        var l, o, k = b.createElement("script"), e = e || B.errorTimeout;
        k.src = a;
        for (o in d) k.setAttribute(o, d[o]);
        c = j ? h : c || f, k.onreadystatechange = k.onload = function() {
            !l && g(k.readyState) && (l = 1, c(), k.onload = k.onreadystatechange = null);
        }, m(function() {
            l || (l = 1, c(1));
        }, e), i ? k.onload() : n.parentNode.insertBefore(k, n);
    }, a.yepnope.injectCss = function(a, c, d, e, g, i) {
        var j, e = b.createElement("link"), c = i ? h : c || f;
        e.href = a, e.rel = "stylesheet", e.type = "text/css";
        for (j in d) e.setAttribute(j, d[j]);
        g || (n.parentNode.insertBefore(e, n), m(c, 0));
    };
}(this, document), Modernizr.load = function() {
    yepnope.apply(window, [].slice.call(arguments, 0));
};